/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mic.product.infrastructure.rest.service;

import com.mic.product.infrastructure.domain.dto.ErrorResponseDTO;
import com.mic.product.infrastructure.domain.dto.ProductDTO;
import com.mic.product.infrastructure.domain.dto.ProductRequestDTO;
import com.mic.product.infrastructure.domain.dto.ProductUpdateRequestDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-16T16:30:05.008659600-05:00[America/Lima]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Products", description = "the Products API")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /product/v1/data/ : Create a new product
     * Create a new product with the provided details
     *
     * @param productRequestDTO  (required)
     * @return Product created successfully (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Conflict, product already exists (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Create a new product",
        description = "Create a new product with the provided details",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Product created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "409", description = "Conflict, product already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/product/v1/data/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProductDTO> _createProduct(
        @Parameter(name = "ProductRequestDTO", description = "", required = true) @Valid @RequestBody ProductRequestDTO productRequestDTO
    ) {
        return createProduct(productRequestDTO);
    }

    // Override this method
    default  ResponseEntity<ProductDTO> createProduct(ProductRequestDTO productRequestDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"color\" : \"Black\", \"price\" : 0.8008281904610115, \"name\" : \"Laptop\", \"description\" : \"High performance laptop with 16GB RAM and 512GB SSD\", \"sku\" : \"SKU123456\", \"brand\" : \"BrandName\", \"productType\" : \"COMPUTER\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /product/v1/data/{id} : Delete a product by SKU
     * Delete a product using its unique identifier
     *
     * @param id unique identifier of the product (required)
     * @return Product deleted successfully (status code 204)
     *         or Unauthorized (status code 401)
     *         or Product not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Delete a product by SKU",
        description = "Delete a product using its unique identifier",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Product deleted successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Product not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/product/v1/data/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> _deleteProduct(
        @Parameter(name = "id", description = "unique identifier of the product", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return deleteProduct(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteProduct(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/v1/data/{id} : Return a products by SKU
     * Get a product by its unique identifier
     *
     * @param id unique identifier of the product (required)
     * @return Products found (status code 200)
     *         or Unauthorized (status code 401)
     *         or Products not found (status code 404)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "findProduct",
        summary = "Return a products by SKU",
        description = "Get a product by its unique identifier",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Products found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Products not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/v1/data/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProductDTO> _findProduct(
        @Parameter(name = "id", description = "unique identifier of the product", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return findProduct(id);
    }

    // Override this method
    default  ResponseEntity<ProductDTO> findProduct(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"color\" : \"Black\", \"price\" : 0.8008281904610115, \"name\" : \"Laptop\", \"description\" : \"High performance laptop with 16GB RAM and 512GB SSD\", \"sku\" : \"SKU123456\", \"brand\" : \"BrandName\", \"productType\" : \"COMPUTER\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/v1/data/ : Return all products
     * Get a list of products
     *
     * @return Products found (status code 200)
     *         or Unauthorized (status code 401)
     *         or Products not found (status code 404)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "findProducts",
        summary = "Return all products",
        description = "Get a list of products",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Products found", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductDTO.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Products not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/v1/data/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProductDTO>> _findProducts(
        
    ) {
        return findProducts();
    }

    // Override this method
    default  ResponseEntity<List<ProductDTO>> findProducts() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"color\" : \"Black\", \"price\" : 0.8008281904610115, \"name\" : \"Laptop\", \"description\" : \"High performance laptop with 16GB RAM and 512GB SSD\", \"sku\" : \"SKU123456\", \"brand\" : \"BrandName\", \"productType\" : \"COMPUTER\" }, { \"color\" : \"Black\", \"price\" : 0.8008281904610115, \"name\" : \"Laptop\", \"description\" : \"High performance laptop with 16GB RAM and 512GB SSD\", \"sku\" : \"SKU123456\", \"brand\" : \"BrandName\", \"productType\" : \"COMPUTER\" }, { \"color\" : \"Black\", \"price\" : 0.8008281904610115, \"name\" : \"Laptop\", \"description\" : \"High performance laptop with 16GB RAM and 512GB SSD\", \"sku\" : \"SKU123456\", \"brand\" : \"BrandName\", \"productType\" : \"COMPUTER\" }, { \"color\" : \"Black\", \"price\" : 0.8008281904610115, \"name\" : \"Laptop\", \"description\" : \"High performance laptop with 16GB RAM and 512GB SSD\", \"sku\" : \"SKU123456\", \"brand\" : \"BrandName\", \"productType\" : \"COMPUTER\" }, { \"color\" : \"Black\", \"price\" : 0.8008281904610115, \"name\" : \"Laptop\", \"description\" : \"High performance laptop with 16GB RAM and 512GB SSD\", \"sku\" : \"SKU123456\", \"brand\" : \"BrandName\", \"productType\" : \"COMPUTER\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /product/v1/data/{id} : Partially update a product
     * Update specific fields of an existing product
     *
     * @param id unique identifier of the product (required)
     * @param productUpdateRequestDTO  (required)
     * @return Product partially updated successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Product not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "patchProduct",
        summary = "Partially update a product",
        description = "Update specific fields of an existing product",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product partially updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Product not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/product/v1/data/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProductDTO> _patchProduct(
        @Parameter(name = "id", description = "unique identifier of the product", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ProductUpdateRequestDTO", description = "", required = true) @Valid @RequestBody ProductUpdateRequestDTO productUpdateRequestDTO
    ) {
        return patchProduct(id, productUpdateRequestDTO);
    }

    // Override this method
    default  ResponseEntity<ProductDTO> patchProduct(String id, ProductUpdateRequestDTO productUpdateRequestDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"color\" : \"Black\", \"price\" : 0.8008281904610115, \"name\" : \"Laptop\", \"description\" : \"High performance laptop with 16GB RAM and 512GB SSD\", \"sku\" : \"SKU123456\", \"brand\" : \"BrandName\", \"productType\" : \"COMPUTER\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /product/v1/data/{id} : Update an existing product
     * Update the details of an existing product
     *
     * @param id unique identifier of the product (required)
     * @param productUpdateRequestDTO  (required)
     * @return Product updated successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Product not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update an existing product",
        description = "Update the details of an existing product",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Product not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/product/v1/data/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProductDTO> _updateProduct(
        @Parameter(name = "id", description = "unique identifier of the product", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ProductUpdateRequestDTO", description = "", required = true) @Valid @RequestBody ProductUpdateRequestDTO productUpdateRequestDTO
    ) {
        return updateProduct(id, productUpdateRequestDTO);
    }

    // Override this method
    default  ResponseEntity<ProductDTO> updateProduct(String id, ProductUpdateRequestDTO productUpdateRequestDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"color\" : \"Black\", \"price\" : 0.8008281904610115, \"name\" : \"Laptop\", \"description\" : \"High performance laptop with 16GB RAM and 512GB SSD\", \"sku\" : \"SKU123456\", \"brand\" : \"BrandName\", \"productType\" : \"COMPUTER\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"PRODUCT-ERROR\", \"message\" : \"Generic error message\", \"timestamp\" : \"2025-06-15T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
